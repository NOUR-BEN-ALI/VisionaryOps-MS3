#version: '3'
#
#services:
#  zookeeper:
#    image: wurstmeister/zookeeper:latest
#    container_name: zookeeper
#    environment:
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#    networks:
#      - my-network
#
#  kafka-service:
#    image: wurstmeister/kafka:latest
#    container_name: kafka-service
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-service:9092
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    depends_on:
#      - zookeeper
#    networks:
#      - my-network
#    volumes:
#      - kafka_data:/kafka/data
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    depends_on:
#      - kafka-service
#    ports:
#      - 8083:8080
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-service:9092
#      DYNAMIC_CONFIG_ENABLED: 'true'
#    networks:
#      - my-network
#  #  command0: ["/bin/bash", "-c", "bin/kafka-topics.sh --create --topic MyApplication --bootstrap-server kafka:9093"]
#
#  postgres:
#    image: postgres:13
#    container_name: postgres
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: admin
#      POSTGRES_DB: basepfe3
#    volumes:  # Utilisation des volumes pour persister les données de PostgreSQL
#      - postgres_data:/var/lib/postgresql/data
#    networks:
#      - my-network
#
#  prometheus:
#    image: prom/prometheus:v2.46.0
#    container_name: prometheus
#    command:
#      - --config.file=/etc/prometheus/prometheus.yml
#    volumes:
#      #      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - ./docker/prometheus/prometheus.yml:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/prometheus/prometheus.yml:ro
#      - prometheus_data:/prometheus
#    ports:
#      - "9090:9090"
#    networks:
#      - my-network
#
#  grafana:
#    image: grafana/grafana:10.1.0
#    container_name: grafana
#    volumes:  # Utilisation des volumes pour persister les données de Grafana
#      - ./docker/grafana/provisioning:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/grafana/provisioning
#      - ./docker/grafana/dashboards:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/grafana/dashboards
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
#      - GF_SERVER_ROOT_URL=http://localhost:3000
#
#    ports:
#      - "3000:3000"
#    networks:
#      - my-network
#
#
#  tempo:
#    image: grafana/tempo:2.2.2
#    container_name: tempo
#    command: [ "-config.file=/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/tempo/tempo.yml" ]
#    volumes:
#      #      - ./docker/tempo/tempo.yml:/etc/tempo/tempo.yml
#      - ./docker/tempo/tempo.yml:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/tempo/tempo.yml:ro
#      - ./docker/tempo/tempo-data:/tmp/tempo
#    ports:
#      - "3110:3100"  # Tempo as Grafana data source
#      - "4317:4317" # OTLP gRPC
#      # - "9411:9411" # Zipkin (if needed)
#    networks:
#      - my-network
#
#
#  collector:
#    container_name: collector
#    image: otel/opentelemetry-collector-contrib:0.91.0
#    command:
#      - --config=/etc/collector/otel-collector.yml
#    volumes:
#      #      - ./docker/collector:/etc/otelcol-contrib
#      - ./docker/collector/otel-collector.yml:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/collector/otel-collector.yml:ro
#    restart: always
#    ports:
#      - "4316:4317" # OTLP gRPC receiver
#    depends_on:
#      - loki
#    networks:
#      - my-network
#
#  loki:
#    container_name: loki
#    image: grafana/loki:2.9.0
#    ports:
#      - "3100:3100"
#    command: -config.file=/etc/loki/local-config.yaml
#    networks:
#      - my-network
#
#  microservice1:
#    container_name: microservice1
#    build: ./Microservice1
#    ports:
#      - "9989:9997"
#    depends_on:
#      - postgres
#      - kafka-service
#    environment:
#      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"  # Endpoint for Tempo OTLP receiver
#      OTEL_EXPORTER_OTLP_ENDPOINT_LOGS_ENDPOINT: "http://collector:4317"
#      OTEL_EXPORTER_OTLP_TIMEOUT: "3000"  # Optional: set timeout in milliseconds
#      OTEL_METRICS_EXPORTER: "prometheus"
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/basepfe3
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-service:9092
#    networks:
#      - my-network
#
#  microservice2:
#    container_name: microservice2
#    build: ./Microservice2
#    ports:
#      - "9988:9998"
#    depends_on:
#      - postgres
#      - kafka-service
#      - microservice1
#
#    environment:
#      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"  # Endpoint for Tempo OTLP receiver
#      OTEL_EXPORTER_OTLP_TIMEOUT: "3000"  # Optional: set timeout in milliseconds
#      OTEL_METRICS_EXPORTER: none
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/basepfe4
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-service:9092
#
#    networks:
#      - my-network
#
#  microservice3:
#    build: ./Microservice3
#    container_name: microservice3
#    ports:
#      - "9987:9999"
#    depends_on:
#      - postgres
#      - kafka-service
#      - microservice1
#    environment:
#      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"  # Endpoint for Tempo OTLP receiver
#      OTEL_EXPORTER_OTLP_TIMEOUT: "3000"  # Optional: set timeout in milliseconds
#      OTEL_METRICS_EXPORTER: none
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/basepfe5
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-service:9092
#    networks:
#      - my-network
#
#networks:
#  my-network:
#
#volumes:  # Définition des volumes
#  postgres_data:
#  prometheus_data:
#  grafana_data:
#  kafka_data:
#  tempo-data:
##  sonarqube_data:
##  sonarqube_extensions:
##  sonarqube_logs:
##  postgresql:
##  postgresql_data:
##  nexus_data:
version: '3'

services:

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my-network

  kafka-service:
    image: wurstmeister/kafka:latest
    container_name: kafka-service
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-service:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - my-network
    volumes:
      - kafka_data:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/kafka/data:rw

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka-service
    ports:
      - 8083:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-service:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - my-network

  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: basepfe3
    volumes:
      - postgres_data:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/postgres/data:rw
    networks:
      - my-network


  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
        #      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/prometheus.yml:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - my-network

  loki:
    container_name: loki
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    command:
     - --config.file=/etc/loki/local-config.yaml
    volumes:
       - ./docker/loki/local-config.yaml:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/loki/local-config.yaml:ro
    networks:
        - my-network

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    volumes:
      - ./docker/grafana/provisioning:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/grafana/provisioning:rw
      - ./docker/grafana/dashboards:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/grafana/dashboards:rw
      - grafana_data:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/grafana/data:rw
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_SERVER_ROOT_URL=http://localhost:3000
    ports:
      - "3000:3000"
    networks:
      - my-network

  tempo:
    image: grafana/tempo:2.2.2
    container_name: tempo
    command: [ "-config.file=/etc/tempo/tempo.yml" ]
    volumes:
      - /var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/tempo/tempo.yml:/etc/tempo/tempo.yml:ro
      - /var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/tempo/tempo-data:/tmp/tempo
    ports:
      - "3110:3100"
      - "4317:4317"
    networks:
      - my-network


  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.91.0
    command:
      - --config=/etc/collector/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/docker/collector/otel-collector.yml:ro
    restart: always
    ports:
      - "4316:4317" # OTLP gRPC receiver
    depends_on:
      - loki
    networks:
      - my-network



  microservice1:
    container_name: microservice1
    build: ./Microservice1
    ports:
      - "9989:9997"
    depends_on:
      - postgres
      - kafka-service
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"
      OTEL_EXPORTER_OTLP_ENDPOINT_LOGS_ENDPOINT: "http://collector:4317"
      OTEL_EXPORTER_OTLP_TIMEOUT: "3000"
      OTEL_METRICS_EXPORTER: "prometheus"
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/basepfe3
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-service:9092
    networks:
      - my-network
    volumes:
      - ./Microservice1:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/Microservice1:rw

  microservice2:
    container_name: microservice2
    build: ./Microservice2
    ports:
      - "9988:9998"
    depends_on:
      - postgres
      - kafka-service
      - microservice1
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"
      OTEL_EXPORTER_OTLP_ENDPOINT_LOGS_ENDPOINT: "http://collector:4317"
      OTEL_EXPORTER_OTLP_TIMEOUT: "3000"
      OTEL_METRICS_EXPORTER: none
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/basepfe4
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-service:9092
    networks:
      - my-network
    volumes:
      - ./Microservice2:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/Microservice2:rw

  microservice3:
    build: ./Microservice3
    container_name: microservice3
    ports:
      - "9987:9999"
    depends_on:
      - postgres
      - kafka-service
      - microservice1
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"
      OTEL_EXPORTER_OTLP_ENDPOINT_LOGS_ENDPOINT: "http://collector:4317"
      OTEL_EXPORTER_OTLP_TIMEOUT: "3000"
      OTEL_METRICS_EXPORTER: none
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/basepfe5
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-service:9092
    networks:
      - my-network
    volumes:
      - ./Microservice3:/var/jenkins_home/jobs/VisionaryOps/workspace@2/MyApp-PFE/Microservice3:rw

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  kafka_data:
  tempo_data:
  loki_data:

networks:
  my-network:
    driver: bridge
